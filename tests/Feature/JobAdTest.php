<?php

namespace Tests\Feature;

use App\Models\Company;
use App\Models\Employer;
use App\Models\JobAd;
use App\Models\User;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class JobAdTest extends TestCase
{
//    use RefreshDatabase;
    use WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

//        $this->artisan('db:seed');
    }

    protected string $route_name = 'job_ads';

    public function test_authorize_for_sanctum_user()
    {
        $response = $this->getJson(route("api.$this->route_name.index"));
        $response->assertStatus(401);
    }

    public function test_get_all_job_ads()
    {
        Sanctum::actingAs(
            User::factory()->create()
        );
        $response = $this->getJson(route("api.$this->route_name.index"));
        $response->assertOk();
    }

//    public function test_get_employers_companies_job_ads()
//    {
//        $user = User::factory()->create();
//
//        $employer = new Employer();
//        $employer->score = 10;
//
//        $employer->user()->associate($user);
//        $employer->save();
//
//        $company = new Company();
//        $company->persian_name = 'test1';
//        $company->english_name = 'test2';
//        $company->nick_name = 'test';
//
//        $user->employer->companies()->save($company);
//
//        $jobAd = new JobAd();
//
//        $jobAd->title = 'title';
//        $jobAd->province = 'province';
//        $jobAd->description = 'description';
//        $jobAd->type_of_cooperation = '0';
////        $jobAd->job_ad_category = 1;
//
//        $jobAd->company()->associate($company)->save();
//
//
//        Sanctum::actingAs($user);
//
//        $response = $this->postJson(route("api.$this->route_name.my_jobAds"));
//        dd($response->decodeResponseJson());
//        $response->assertOk();
//    }

    public function test_store_job_ads()
    {
        $user = User::factory()->create();

        $employer = new Employer();
        $employer->score = 10;

        $employer->user()->associate($user);
        $employer->save();

        $company = new Company();
        $company->persian_name = $this->faker->name;
        $company->english_name = $this->faker->name;
        $company->nick_name = $this->faker->userName;

        $user->employer->companies()->save($company);

        Sanctum::actingAs($user);

        $request = [
            'title' => $this->faker->name,
            'province' => $this->faker->century,
            'description' => $this->faker->text,
            'type_of_cooperation' => '0',
            'job_category_id' => 2,
        ];

        $response = $this->postJson(route("api.$this->route_name.store", ['company' => $company]), $request);
        $response->assertCreated();
    }

    public function test_show_job_ad()
    {
        $user = User::factory()->create();

        $employer = new Employer();
        $employer->score = 10;

        $employer->user()->associate($user);
        $employer->save();

        $company = new Company();
        $company->persian_name = $this->faker->name;
        $company->english_name = $this->faker->name;
        $company->nick_name = $this->faker->userName;


        $user->employer->companies()->save($company);

        $jobAd = new JobAd();

        $jobAd->title = $this->faker->name;
        $jobAd->province = $this->faker->country;
        $jobAd->description = $this->faker->text;
        $jobAd->type_of_cooperation = '0';
        $jobAd->job_category_id = 3;

        $jobAd->company()->associate($company)->save();


        Sanctum::actingAs($user);

        $response = $this->getJson(route("api.$this->route_name.show", ['job_ad' => $jobAd->id]));
        $response->assertOk();

    }

    public function test_update_job_ad()
    {
        $user = User::factory()->create();

        $employer = new Employer();
        $employer->score = 10;

        $employer->user()->associate($user);
        $employer->save();

        $company = new Company();
        $company->persian_name = $this->faker->name;
        $company->english_name = $this->faker->name;
        $company->nick_name = $this->faker->userName;


        $user->employer->companies()->save($company);

        Sanctum::actingAs($user);

        $jobAd = new JobAd();

        $jobAd->title = $this->faker->name;
        $jobAd->province = $this->faker->country;
        $jobAd->description = $this->faker->text;
        $jobAd->type_of_cooperation = '0';
        $jobAd->job_category_id = 4;

        $jobAd->company()->associate($company)->save();


        $request = [
            'title' => 'title2',
            'description' => 'description2',
        ];

        $response = $this->patchJson(route("api.$this->route_name.update", ['job_ad' => $jobAd]), $request);
        $response->assertOk();

        $jobAd = JobAd::find($jobAd->id);
        $this->assertEquals('title2', $jobAd->title);
    }

    public function test_delete_company()
    {
        $user = User::factory()->create();

        $employer = new Employer();
        $employer->score = 10;

        $employer->user()->associate($user);
        $employer->save();

        $company = new Company();
        $company->persian_name = $this->faker->name;
        $company->english_name = $this->faker->name;
        $company->nick_name = $this->faker->userName;


        $user->employer->companies()->save($company);

        $jobAd = new JobAd();

        $jobAd->title = $this->faker->name;
        $jobAd->province = $this->faker->country;
        $jobAd->description = $this->faker->text;
        $jobAd->type_of_cooperation = '0';
        $jobAd->job_category_id = 5;

        $jobAd->company()->associate($company)->save();


        Sanctum::actingAs($user);

        $response = $this->deleteJson(route("api.$this->route_name.destroy", ['job_ad' => $jobAd]));
        $response->assertStatus(204);
    }
}
