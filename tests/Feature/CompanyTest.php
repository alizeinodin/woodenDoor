<?php

namespace Tests\Feature;

use App\Models\Company;
use App\Models\Employer;
use App\Models\User;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\UploadedFile;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class CompanyTest extends TestCase
{
//    use RefreshDatabase;
    use WithFaker;

    public const EMPLOYEE_ROLE = 'Employer';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

//        $this->artisan('db:seed');
    }

    public function test_authorize_for_sanctum_user()
    {
        $response = $this->getJson(route('api.company.index'));
        $response->assertStatus(401);
    }

    public function test_get_all_companies()
    {
        Sanctum::actingAs(
            User::factory()->create()
        );
        $response = $this->getJson(route('api.company.index'));
        $response->assertOk();
    }

    public function test_get_employers_company()
    {
        $user = User::factory()->create();

        $employer = new Employer();
        $employer->score = 10;

        $user->syncRoles([self::EMPLOYEE_ROLE]);


        $employer->user()->associate($user);
        $employer->save();

        $company = new Company();
        $company->persian_name = $this->faker->name;
        $company->english_name = $this->faker->name;
        $company->nick_name = $this->faker->userName;

        $user->employer->companies()->save($company);

        Sanctum::actingAs($user);

        $response = $this->postJson(route('api.company.my_companies'));
        $response->assertOk();
    }

    public function test_store_company()
    {
        $user = User::factory()->create();

        $employer = new Employer();
        $employer->score = 10;

        $user->syncRoles([self::EMPLOYEE_ROLE]);


        $employer->user()->associate($user);
        $employer->save();

        Sanctum::actingAs($user);

        $file = UploadedFile::fake();

        $request = [
            'persian_name' => $this->faker->name,
            'english_name' => $this->faker->name,
            'nick_name' => $this->faker->userName,
            'file' => $file,
        ];

        $response = $this->postJson(route('api.company.store', $request));
        $response->assertCreated();
    }

    public function test_show_company()
    {
        $user = User::factory()->create();

        $employer = new Employer();
        $employer->score = 10;

        $user->syncRoles([self::EMPLOYEE_ROLE]);


        $employer->user()->associate($user);
        $employer->save();

        Sanctum::actingAs($user);

        $company = new Company();
        $company->persian_name = $this->faker->name;
        $company->english_name = $this->faker->name;
        $company->nick_name = $this->faker->userName;

        $user->employer->companies()->save($company);

        $response = $this->getJson(route('api.company.show', ['company' => $company->id]));
        $response->assertOk();

    }

    public function test_update_company()
    {
        $user = User::factory()->create();

        $employer = new Employer();
        $employer->score = 10;

        $user->syncRoles([self::EMPLOYEE_ROLE]);

        $employer->user()->associate($user);
        $employer->save();

        $company = new Company();
        $company->persian_name = $this->faker->name;
        $company->english_name = $this->faker->name;
        $company->nick_name = $this->faker->userName;

        $user->employer->companies()->save($company);

        Sanctum::actingAs($user);

        $request = [
            'persian_name' => 'farsi',
            'english_name' => 'english',
            'nick_name' => 'google',
        ];

        $response = $this->patchJson(route('api.company.update', ['company' => $company]), $request);
        $response->assertOk();

        $company = Company::find($company->id);
        $this->assertEquals('google', $company->nick_name);
    }

    public function test_delete_company()
    {
        $user = User::factory()->create();

        $employer = new Employer();
        $employer->score = 10;

        $user->syncRoles([self::EMPLOYEE_ROLE]);

        $employer->user()->associate($user);
        $employer->save();

        $company = new Company();
        $company->persian_name = $this->faker->name;
        $company->english_name = $this->faker->name;
        $company->nick_name = $this->faker->userName;

        $user->employer->companies()->save($company);

        Sanctum::actingAs($user);

        $response = $this->deleteJson(route('api.company.destroy', ['company' => $company]));
        $response->assertStatus(204);
    }
}
